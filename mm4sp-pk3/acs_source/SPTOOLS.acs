#library "SPTOOLS"

#include "zcommon.acs"
#include "8BDMLIB.acs"

#DEFINE PHARAOHMANSP 978
#DEFINE PHARAOHFLASH 979
#DEFINE EDDIECALL 980
#DEFINE LEAFSHIELDSP 990
#DEFINE SPARKSHOCKSP 991
#DEFINE NAPALMBOMBSP 992
#DEFINE YAMATOSPEARSP 993
#DEFINE DANGERWRAPSP 994
#DEFINE FLAMESWORDSP 995
#DEFINE ICEWALLSP 996
#DEFINE BLACKHOLEBOMBSP 997

script "4SP_Colors" OPEN CLIENTSIDE
{
Delay(25);
CreateTranslation(PHARAOHMANSP, 192:192=4:4, 198:198=216:216, 196:196=112:112);
CreateTranslation(PHARAOHFLASH, 4:4=192:192, 210:210=198:198, 0:0=4:4, 196:196=112:112);
CreateTranslation(EDDIECALL, 192:192=4:4, 198:198=227:227);

CreateTranslation(LEAFSHIELDSP, 192:192=4:4, 198:198=129:129, 199:199=131:131);
CreateTranslation(SPARKSHOCKSP, 192:192=4:4, 198:198=225:225, 199:199=222:222);
CreateTranslation(NAPALMBOMBSP, 192:192=216:216, 198:198=75:75, 199:199=243:243);
CreateTranslation(YAMATOSPEARSP, 192:192=4:4, 198:198=236:236, 199:199=251:251);
CreateTranslation(DANGERWRAPSP, 192:192=4:4, 198:198=230:230, 199:199=166:166);
CreateTranslation(FLAMESWORDSP, 192:192=248:248, 198:198=41:41, 199:199=45:45);
CreateTranslation(ICEWALLSP, 192:192=200:200, 198:198=75:75, 199:199=243:243);
CreateTranslation(BLACKHOLEBOMBSP, 192:192=59:59, 198:198=62:62, 199:199=79:79);
}

// [Trill] Cooperative/survival can be tricky about resetting inventories properly, put stuff that needs to be corrected here.
//
script "4SP_ResetPlayer" ENTER 
{
TakeInventory("IsDead",999);
TakeInventory("BossFlag",999);
}

script "4SP_ResetPlayer_Respawn" RESPAWN 
{
ACS_NamedExecuteAlways("4SP_ResetPlayer", 0);
}

/* [Trill] I'm not satisfied with how this script works, will look at again later
//
// [Trill] CPU saving script, changemap to hub if no players remain in server.
//
Script "4SP_ResetToHub" OPEN
{
if(GameType()==GAME_SINGLE_PLAYER){terminate;}
if(GetLevelInfo(LEVELINFO_LEVELNUM)==500){terminate;}
Delay(70);
until(PlayerCount()<=0) 
{  
Delay(35);
}
ChangeLevel("CCHUB", 0, CHANGELEVEL_NOINTERMISSION|CHANGELEVEL_RESETHEALTH|CHANGELEVEL_RESETINVENTORY);
terminate;
}*/

// [Trill] Scripts ported and slightly modified from MMSP-Basic
//
script "4SP_EnemyStart" (void)
{
Delay(1);
ACS_NamedExecuteAlways("4SP_EnemyPain",0);
GiveInventory("RadiusCounter",GetActorProperty(0,APROP_Radius)/65536);
GiveInventory("HeightCounter",GetActorProperty(0,APROP_Height)/65536);

if(CheckInventory("HealthScaled")==1){terminate;}
if(PlayerCount()==1){GiveInventory("HealthScaled",1); terminate;}
if(GetCvar("ccsp_healthscaling")==0){GiveInventory("HealthScaled",1); terminate;}

if(GetCvar("ccsp_healthscaling")==2)
{
SetActorProperty(0,APROP_Health,GetActorProperty (0,APROP_Health) + (GetActorProperty (0,APROP_Health)/4) * PlayerCount()); 
GiveInventory("HealthScaled",1); 
terminate;
}

if(PlayerCount()>=8){SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_Health)*2); GiveInventory("HealthScaled",1); terminate;}
else{SetActorProperty(0,APROP_Health,GetActorProperty (0,APROP_Health) + (GetActorProperty (0,APROP_Health)/8) * PlayerCount()); GiveInventory("HealthScaled",1); terminate;}
}

// [Trill] Stop respawning enemies overflowing, ported from MMSP-Basic
script "4SP_OverflowCheck" (int Enemy)
{
if(Enemy==0){if(ThingCountName("SP_Claw",0)>25){SetActorState(0, "Despawn"); }}
if(Enemy==1){if(ThingCountName("SP_Docron",0)>4){SetActorState(0, "Despawn"); }}
if(Enemy==2){if(ThingCountName("SP_Docron",0)>4){SetActorState(0, "SeeWait"); }}
}

Script "4SP_EnemyPain" (void) //CLIENTSIDE
{
    if(CheckInventory("BoostFlag")>0){terminate;} // Do not run twice for one monster
    int HP = GetActorProperty(0, APROP_Health);
    GiveInventory("BoostFlag", 1);
    
	
    while(GetActorProperty(0, APROP_Health)>0){
	
        if(HP != GetActorProperty(0, APROP_Health)){
        PlayActorSound(0, SOUND_Pain, CHAN_BODY, 1.0, false, ATTN_NORM);
        SetActorProperty(0, APROP_RenderStyle, STYLE_None);
        GiveInventory("EnemyDamageCheck",1);
        Delay(1);
        SetActorProperty(0, APROP_RenderStyle, STYLE_Normal);
        HP = GetActorProperty(0, APROP_Health);
		}
		
    Delay(4);
    }
}

script "4SP_EnemyManage" (int source, int value)
{
    switch(source) // "source" of damage
    {
    Case 1:
        if(value > 0)
        {
            if(!CheckFlag(0, "NOGRAVITY"))
            {
                SetActorProperty(0, APROP_GRAVITY, 0);
                GiveInventory("MonsterFreezeFlag", 1);
            }
            GiveInventory("ChangeNoPainTrue",1);
            SetUserVariable(0,"user_velx",GetActorVelX(0));
            SetUserVariable(0,"user_vely",GetActorVelY(0));
            SetUserVariable(0,"user_velz",GetActorVelZ(0));
            SetActorVelocity(0, 0, 0, 0, 0, 0);
            Thing_Stop(0);
        }
        else
        {
            GiveInventory("ChangeNoPainFalse",1);
            if(CheckInventory("MonsterFreezeFlag") > 0)
            {
                TakeInventory("MonsterFreezeFlag", 999);
                SetActorProperty(0, APROP_GRAVITY, 1*65536);
            }
            SetActorVelocity(0,GetUserVariable(0,"user_velx"),GetUserVariable(0,"user_vely"),GetUserVariable(0,"user_velz"),0,0);
        }
    break;
    }
}

// [Russel] Simple inventory count script.
// [Trill] Added onto it to include pointer selection.
// 
script "4SP_CountInv" (int which, int pointer)
{

    if(pointer != 0) {
		setActivator(0, pointer);
	}

    switch(which) {
        case 0: // Ring Man
            SetResultValue(CheckInventory("RingManAmmo"));
            break;
        Case 1: // Enemy Radius
			SetResultValue(CheckInventory("RadiusCounter"));
			break;
		Case 2: // Enemy Height
			SetResultValue(CheckInventory("HeightCounter"));
			break;
		Case 3: // Enemy Damage
			SetResultValue(CheckInventory("DamageCounter"));
			break;    
    }

}

// [Trill] Distance checker for BombThrown ported from MMSP-Basic
//
script "4SP_Distance" (void)
{
int dist;

dist = xyDistance(ActivatorTID(),3800);

//PrintBold(i:dist);

SetThingSpecial (3800, 0, dist, 0, 0, 0, 0);
}

// [Trill] HP script, heavily modified and cut down from CBM
script "4SP_HealthManager" (int Which, int HPBoost)
{
	int HP = max(GetActorProperty(0,APROP_HEALTH),0);
	int Spawn_H = GetActorProperty(0, APROP_SPAWNHEALTH);
	switch(Which)
	{
		Case 1://Heal
			if(HP <= 0){terminate;}
			HealThing(HPBoost,Spawn_H);
			break;
		Case 0://Return false if max health
			if(HP >= Spawn_H){SetResultValue(0);}
			break;
	}
}

//[Trill] Floor quakes in a radius, heavily modified from CBM. Niche script probably
//
script "4SP_FloorQuakeDamage" (int maxRange, int QuakePower)
{
	int zDist;
	for(int p = 0;p < ServerMAX; p++)
	{
		if(!PlayerInGame(p))
		{
			continue;
		}
		if(xyDistance(0, p+1000) < maxRange && zDistance(0, p+1000) >= -32 && zDistance(0, p+1000) <= 32)
		{
			SpawnProjectile(0,"EnemyFloorQuake",QuakePower,0,p,0,0);
		}
	}
}

// [Russel] Check Alive script. Nicked from CBM.
//
script "4SP_CheckAlive" (void) {
    SetActivatorToTarget(0);
	if(PlayerNumber() == -1 || CheckInventory("IsDead") || !PlayerInGame(PlayerNumber())){
		SetResultValue(0);
	}
}

// [Russel] The big bad weapon script. Gives weapons based on completed bosses and selected class.
// CVARS: SV_CC_[player]_[boss]_WEP
// WEPS: [player]_[boss]WEP
// [Trill] Hey guess what, I added non-standard weapons for 4 classes then hackjobbed their ammo into this.
// It fixes the issue of ammo not regenning in cooperative/survival modes.
// AMMO: [player]ammo2
//
#define MAX_BOSSES 4
str bossList[MAX_BOSSES][2] = {
    {"WoodManBossCC", "Wood"},
    {"SparkManBossCC", "Spark"},
    {"NapalmManBossCC", "Napalm"},
    {"YamatoManBossCC", "Yamato"}
};

#define MAX_PLAYERS 9
str playerList[MAX_PLAYERS][2] = {
    {"RingManSP", "Ring"},
    {"DustManSP", "Dust"},
    {"ToadManSP", "Toad"},
    {"MegaManSP", "Mega"},
    {"BrightManSP", "Bright"},
    {"SkullManSP", "Skull"},
    {"DiveManSP", "Dive"},
    {"PharaohManSP", "Pharaoh"},
    {"DrillManSP", "Drill"}
};

script "4SP_GiveWeapons" ENTER {

    str player = getPrefix(getActorClass(0), 0);

    if(player == "Mega"||player == "Bright"||player == "Skull"||player == "Pharaoh"){
        str ammo = StrParam(s:player, s:"ManAmmo2");
        GiveInventory(ammo, GetAmmoCapacity(ammo));
    }

    for(int i = 0; i < MAX_BOSSES; i++) {
        str cvar = strParam(s:"SV_CC_", s:player, s:"_", s:bossList[i][1], s:"_Wep");
        str wep = strParam(s:player, s:"_", s:bossList[i][1], s:"Wep");
        if(getCvar(cvar) > 0) {
            GiveInventory(wep, 1);
        }
    }
}

script "4SP_GiveWeapons_Respawn" RESPAWN {
    ACS_NamedExecuteAlways("4SP_GiveWeapons", 0);
}

script "4SP_SetWeaponGiven" (int debug) {

    str boss;
    str cvar;
    str cvar2;
    if(debug == 0) {
        boss = getPrefix(getActorClass(0), 1);
    } else {
        boss = bossList[debug-1][1];
    }
    str player = getPrefix(getActorClass(ACS_ExecuteWithResult(257)), 0); // Player who killed the boss

    str playercolor = getColor(player);
    str bosscolor = getColor(boss);

    cvar2 = strParam(s:boss, s:"_", s:player);
    setCvarString("CCSP_WeaponGet",cvar2);

    if(GetCVar("SV_CC_AllWeapons")) {
        for(int i = 0; i < MAX_PLAYERS; i++) {
            cvar = strParam(s:"SV_CC_", s:playerList[i][1], s:"_", s:boss, s:"_Wep");
            setCVar(cvar, true);
        }
    } else {
        cvar = strParam(s:"SV_CC_", s:player, s:"_", s:boss, s:"_Wep");
        setCVar(cvar, true);
    }

    SetActivatorToTarget(0);
    if(GameType()!=GAME_SINGLE_PLAYER){
    SetHudSize(600,380,0);
    if(GetCvar("SV_CC_AllWeapons")){HudMessageBold(n:0, s:" has slain ", s:bosscolor, s:boss, s:" man\cf!";HUDMSG_FADEOUT|HUDMSG_LOG,2,CR_GOLD,300.4,50.0,4.0,0.5);}
    else{HudMessageBold(n:0, s:" (", s:playercolor, s:player, s:" man\cf) has slain ", s:bosscolor, s:boss, s:" man\cf!";HUDMSG_FADEOUT|HUDMSG_LOG,2,CR_GOLD,300.4,50.0,4.0,0.5);}
    }
}

function str getPrefix(str name, bool which) {

    str res = "none";

    if(!which) { // players

        for(int i = 0; i < MAX_PLAYERS; i++) {
            if(strcmp(playerList[i][0], name)==0) {
                res = playerList[i][1];
            }
        }

    } else { // bosses

        for(int j = 0; j < MAX_BOSSES; j++) {
            if(strcmp(bossList[j][0], name)==0) {
                res = bossList[j][1];
            }
        }
    }

    return res;
}

// [Russel] Script to loop and check if the player is standing on floor or a solid.
//
script "4SP_GroundEnter" ENTER {

    int zCheck = 0;
    bool onGround = true;

    while(GetActorProperty(0, APROP_HEALTH) > 0) {

        if(GetActorZ(0) - GetActorFloorZ(0) == 0) {
            onGround = true;
        }
        
        if(GetActorVelZ(0) != 0) {
            onGround = false;
            zCheck = 0;
        }

        if(!onGround) {
            if(GetActorVelZ(0) == 0) {
                if(zCheck >= 3) {
                    zCheck++;
                } else {
                    onGround = true;
                }
            }
        }

        if(onGround) {
            if(!CheckInventory("OnGround") || CheckInventory("InAir")) {
                GiveInventory("OnGround", 1);
                TakeInventory("InAir", 1);
            }
        } else {
            if(CheckInventory("OnGround") || !CheckInventory("InAir")) {
                TakeInventory("OnGround", 1);
                GiveInventory("InAir", 1);
            }
        }

        delay(1);
    }
}

script "4SP_GroundRespawn" RESPAWN {
    ACS_NamedExecuteAlways("4SP_GroundEnter", 0);
}

// [Trill] Script for removing blocking linedefs
script "4SP_BlockRemover" (int which)
{
    if(which==0){
        terminate;
    }
    Line_SetBlocking(which,0,BLOCKF_PLAYERS);
}

// [Trill] Minimap marker script, snagged from MMSP
script "4SP_MinimapMarker" OPEN clientside
{
for(int i=0; i<64; i++)
    {
    if(ClassifyActor(1000+i) & 34){
		if(CheckActorInventory(1000+i,"BrightmanWep")==1){SpawnSpot("BrightMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"DivemanWep")==1){SpawnSpot("DiveMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"DrillmanWep")==1){SpawnSpot("DrillMarker",1000+i,0,0);}
        if(CheckActorInventory(1000+i,"DustmanWep")==1){SpawnSpot("DustMarker",1000+i,0,0);}
        if(CheckActorInventory(1000+i,"PharaohmanWep")==1){SpawnSpot("PharaohMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"RingmanWep")==1){SpawnSpot("RingMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"SkullmanWep")==1){SpawnSpot("SkullMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"ToadmanWep")==1){SpawnSpot("ToadMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"MegamanWep")==1){SpawnSpot("MegaMarker",1000+i,0,0);}
	}
    }
	Delay(1);
	restart;
}

// [Trill] Survival checker
script "4SP_SurvivalCheck" (void)
{
if(GetCvar("survival")==1)
{SetResultValue(1);}
Else
{SetResultValue(0);}
}

// [Trill] 1-Up 
script "4SP_GiveLife" (void) 
{
SetPlayerLivesLeft(PlayerNumber(),GetPlayerLivesLeft(PlayerNumber())+1); 
}

script "4SP_LifeDisplay" (void) CLIENTSIDE 
{
If(CheckActorClass(consolePlayerNumber()+1000,"BrightmanSP")){SetActorState(0,"Brightman");}
If(CheckActorClass(consolePlayerNumber()+1000,"DivemanSP")){SetActorState(0,"Diveman");}
If(CheckActorClass(consolePlayerNumber()+1000,"DrillmanSP")){SetActorState(0,"Drillman");}
If(CheckActorClass(consolePlayerNumber()+1000,"DustmanSP")){SetActorState(0,"Dustman");}
If(CheckActorClass(consolePlayerNumber()+1000,"PharaohmanSP")){SetActorState(0,"Pharaohman");}
If(CheckActorClass(consolePlayerNumber()+1000,"RingmanSP")){SetActorState(0,"Ringman");}
If(CheckActorClass(consolePlayerNumber()+1000,"SkullmanSP")){SetActorState(0,"Skullman");}
If(CheckActorClass(consolePlayerNumber()+1000,"ToadmanSP")){SetActorState(0,"Toadman");}
If(CheckActorClass(consolePlayerNumber()+1000,"MegamanSP")){SetActorState(0,"Megaman");}
}

// [Trill] Script for Drillman
script "4SP_GetHeight" (void)
{
SetActivatorToTarget(0);
int Result = GetActorZ(0)/65536;
SetResultValue(Result);
}

script "4SP_GetEnemyStats" (int which)
{
SetActivator(0,AAPTR_TRACER);
switch(which){
Case 0: //radius
SetResultValue(GetActorProperty(0,APROP_Radius)/65536);
break;
Case 1: //height
SetResultValue(GetActorProperty(0,APROP_Height)/65536);
break;
}
}

//[Trill] The big bad weapon get display
int weapongetwait = 212;
#DEFINE MAX_WEAPONGETS 11 // Maximum number of weapon gets

//0 - Cvar
//1 - Translation
//2 - Name with line breaks included
//3 - Class
//4 - Boss
//5 - Number of characters (spaces and linebreaks (\n) count as characters!)
str weapon_gets[MAX_WEAPONGETS][6] = 
{
{"Wood_Mega", 990, "Leaf Shield", "Mega", "Wood", 11.0},
{"Wood_Bright", 990, "Bonsai\n\nBarrage", "Bright", "Wood", 15.0},
{"Wood_Toad", 990, "Natural\n\nDownpour", "Toad", "Wood", 17.0},
{"Wood_Drill", 990, "Root Rupture", "Drill", "Wood", 12.0},
{"Wood_Pharaoh", 990, "Solar Totem", "Pharaoh", "Wood", 11.0},
{"Wood_Ring", 990, "Stump\n\nSatellite", "Ring", "Wood", 16.0},
{"Wood_Dust", 990, "Log Chipper", "Dust", "Wood", 11.0},
{"Wood_Dive", 990, "Sprout Mine", "Dive", "Wood", 11.0},
{"Wood_Skull", 990, "Poison\n\nSporegun", "Skull", "Wood", 16.0},

{"Yamato_Mega", 993, "Yamato Spear", "Mega", "Yamato", 12.0},

{"Galaxy_Mega",997, "Black Hole\n\nBomb", "Mega", "Galaxy", 16.0}
};

script "4SP_WeaponGetDisplay" (void)
{ 
if(GetCvarString("CCSP_WeaponGet")=="Null"){terminate;}
SetMusic("4WEPGET",0);
GiveInventory("4SPWeaponGetChange",1);

for(int i = 0; i < MAX_WEAPONGETS; i++) 
{
if(StrIcmp(weapon_gets[i][0], GetCvarString("CCSP_WeaponGet"))==0) 
{
str weapon = weapon_gets[i][2];
SetThingSpecial(406,0,weapon_gets[i][1]);
SetCvarString("CCSP_WeaponGetBoss",weapon_gets[i][4]);
str class = weapon_gets[i][3];
int charactercount = weapon_gets[i][5] >> 16;
}
}

if(GetCvar("SV_CC_AllWeapons"))
{
SetActorState(406,"Resync");
GiveInventory("ActivateClientsideWepGetScript",1);
Delay(65);
}
else
{
SetActorState(406,class);
Delay(65);
SetHudSize(352,240,0);
SetFont("4SPFONT");
HudMessageBold(s:"\n\nYOU GOT" ,s:"\n\n", s:weapon; HUDMSG_TYPEON, 1, CR_WHITE, 150.1, 47.1, 7.0, 0.15, 0.0);
ACS_NamedExecuteAlways("4SP_WeaponGetSoundServer",0,charactercount);
}

Delay(weapongetwait);

SetCvarString("CCSP_WeaponGet","Null");
SetCvarString("CCSP_WeaponGetBoss","Null");
SetMusic("CCHUBMUS",0);
GiveInventory("4SPWeaponGetChangeBack",1);
}

script "4SP_WeaponGetChange" (int which)
{
if(which==1){ChangeCamera(405,0,0); GiveInventory("NoHud",1); ACS_NamedExecuteAlways("core_freezeplayer", 0, 0, 1);}
if(which==0){ChangeCamera(0,0,0); TakeInventory("NoHud",999); ACS_NamedExecuteAlways("core_freezeplayer", 0, 0, 0); HudMessage(s:"\n"; HUDMSG_TYPEON, 1, CR_WHITE, 150.1, 47.1, 0.1, 0.01, 0.0);}
}

script "4SP_ClientsideWeaponGet" (void) CLIENTSIDE
{
If(PlayerNumber()!=ConsolePlayerNumber())
{
SetActivator(ConsolePlayerNumber()+1000);
terminate;
}
str dummycvar = strparam(s:GetCvarString("CCSP_WeaponGetBoss"),s:"_",s:GetPrefix(getActorClass(consolePlayerNumber()+1000),0));
for(int i = 0; i < MAX_WEAPONGETS; i++) 
{
if(StrIcmp(weapon_gets[i][0], dummycvar)==0) 
{
str dummyweapon = weapon_gets[i][2];
str dummyclass = weapon_gets[i][3];
int dummycharactercount = weapon_gets[i][5] >> 16;
SetActorState(406,dummyclass);
Delay(65);
SetHudSize(352,240,0);
SetFont("4SPFONT");
HudMessage(s:"\n\nYOU GOT" ,s:"\n\n", s:dummyweapon; HUDMSG_TYPEON/*|HUDMSG_LOG*/, 1, CR_WHITE, 150.1, 47.1, 7.0, 0.14, 0.0);
ACS_NamedExecuteAlways("4SP_WeaponGetSound",0,dummycharactercount);
Delay(weapongetwait);
HudMessage(s:"\n"; HUDMSG_TYPEON, 1, CR_WHITE, 150.1, 47.1, 0.1, 0.01, 0.0);
}
}
}

script "4SP_WeaponGetSound" (int dummycharactercount) CLIENTSIDE
{
If(PlayerNumber()!=ConsolePlayerNumber())
{
SetActivator(ConsolePlayerNumber()+1000);
terminate;
}
Delay(10);
dummycharactercount = dummycharactercount+9; //adding the YOU GOT
while(dummycharactercount>0)
{
AmbientSound("menu/cctext",127);
dummycharactercount = dummycharactercount-1;
delay(5);
}
terminate;
}

script "4SP_WeaponGetSoundServer" (int charactercount)
{
Delay(10);
charactercount = charactercount+9; //adding the YOU GOT
while(charactercount>0)
{
AmbientSound("menu/cctext",127);
charactercount = charactercount-1;
delay(5);
}
terminate;
}

//[Trill] Color grabber for random stuff.
#DEFINE MAX_TEXTCOLORS 17 // Maximum number of colors

str char_colors[MAX_TEXTCOLORS][2] = 
{
{"Mega", "\cn"},
{"Bright", "\ci"},
{"Toad", "\cd"},
{"Drill", "\cg"},
{"Pharaoh", "\ck"},
{"Ring", "\cg"},
{"Dust", "\cn"},
{"Dive", "\ch"},
{"Skull", "\cj"},
{"Wood", "\cq"},
{"Spark", "\ci"},
{"Napalm", "\ct"},
{"Yamato", "\ct"},
{"Burst", "\ci"},
{"Sword", "\cr"},
{"Cold", "\cv"},
{"Galaxy", "\ct"}
};

function str getColor(str name) 
{
str res = "";
for(int i = 0; i < MAX_TEXTCOLORS; i++) 
{
if(strcmp(char_colors[i][0], name)==0) 
{
res = char_colors[i][1];
}
}
return res;
}