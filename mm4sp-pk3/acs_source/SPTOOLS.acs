#library "SPTOOLSL"

#include "zcommon.acs"
#include "8BDMLIB.acs"

#DEFINE PHARAOHMANSP 978
#DEFINE PHARAOHFLASH 979
#DEFINE EDDIECALL 980

script "4SP_Colors" OPEN CLIENTSIDE
{
Delay(25);
CreateTranslation(PHARAOHMANSP, 192:192=4:4, 198:198=216:216, 196:196=112:112);
CreateTranslation(PHARAOHFLASH, 4:4=192:192, 210:210=198:198, 0:0=4:4, 196:196=112:112);
CreateTranslation(EDDIECALL, 192:192=4:4, 198:198=227:227);
}

// [Trill] Scripts ported and slightly modified from MMSP-Basic
//
script "4SP_EnemyStart" (void)
{
Delay(1);
ACS_NamedExecuteAlways("4SP_EnemyPain",0);
GiveInventory("RadiusCounter",GetActorProperty(0,APROP_Radius)/65536);
GiveInventory("HeightCounter",GetActorProperty(0,APROP_Height)/65536);
if(CheckInventory("HealthScaled")==1){terminate;}

SetActorProperty(0,APROP_Health,GetActorProperty (0,APROP_Health) + (GetActorProperty (0,APROP_Health)/4) * PlayerCount());
GiveInventory("HealthScaled",1);
}

// [Trill] Stop respawning enemies overflowing, ported from MMSP-Basic
script "4SP_OverflowCheck" (int Enemy)
{
if(Enemy==0){if(ThingCountName("SP_Claw",0)>25){SetActorState(0, "Despawn"); }}
}

Script "4SP_EnemyPain" (void) //CLIENTSIDE
{
    if(CheckInventory("BoostFlag")>0){terminate;} // Do not run twice for one monster
    int HP = GetActorProperty(0, APROP_Health);
    GiveInventory("BoostFlag", 1);
    
	
    while(GetActorProperty(0, APROP_Health)>0){
	
        if(HP != GetActorProperty(0, APROP_Health)){
        PlayActorSound(0, SOUND_Pain, CHAN_BODY, 1.0, false, ATTN_NORM);
        SetActorProperty(0, APROP_RenderStyle, STYLE_None);
        GiveInventory("EnemyDamageCheck",1);
        Delay(1);
        SetActorProperty(0, APROP_RenderStyle, STYLE_Normal);
        HP = GetActorProperty(0, APROP_Health);
		}
		
    Delay(4);
    }
}

script "4SP_EnemyManage" (int source, int value)
{
    switch(source) // "source" of damage
    {
    Case 1:
        if(value > 0)
        {
            if(!CheckFlag(0, "NOGRAVITY"))
            {
                SetActorProperty(0, APROP_GRAVITY, 0);
                GiveInventory("MonsterFreezeFlag", 1);
            }
            GiveInventory("ChangeNoPainTrue",1);
            SetUserVariable(0,"user_velx",GetActorVelX(0));
            SetUserVariable(0,"user_vely",GetActorVelY(0));
            SetUserVariable(0,"user_velz",GetActorVelZ(0));
            SetActorVelocity(0, 0, 0, 0, 0, 0);
            Thing_Stop(0);
        }
        else
        {
            GiveInventory("ChangeNoPainFalse",1);
            if(CheckInventory("MonsterFreezeFlag") > 0)
            {
                TakeInventory("MonsterFreezeFlag", 999);
                SetActorProperty(0, APROP_GRAVITY, 1*65536);
            }
            SetActorVelocity(0,GetUserVariable(0,"user_velx"),GetUserVariable(0,"user_vely"),GetUserVariable(0,"user_velz"),0,0);
        }
    break;
    }
}

// [Russel] Simple inventory count script.
// [Trill] Added onto it to include pointer selection.
// 
script "4SP_CountInv" (int which, int pointer)
{

    if(pointer != 0) {
		setActivator(0, pointer);
	}

    switch(which) {
        case 0: // Ring Man
            SetResultValue(CheckInventory("RingManAmmo"));
            break;
        Case 1: // Enemy Radius
			SetResultValue(CheckInventory("RadiusCounter"));
			break;
		Case 2: // Enemy Height
			SetResultValue(CheckInventory("HeightCounter"));
			break;
		Case 3: // Enemy Damage
			SetResultValue(CheckInventory("DamageCounter"));
			break;    
    }

}

// [Trill] Distance checker for BombThrown ported from MMSP-Basic
//
script "4SP_Distance" (void)
{
int dist;

dist = xyDistance(ActivatorTID(),3800);

//PrintBold(i:dist);

SetThingSpecial (3800, 0, dist, 0, 0, 0, 0);
}

// [Trill] HP script, heavily modified and cut down from CBM
script "4SP_HealthManager" (int Which, int HPBoost)
{
	int HP = max(GetActorProperty(0,APROP_HEALTH),0);
	int Spawn_H = GetActorProperty(0, APROP_SPAWNHEALTH);
	switch(Which)
	{
		Case 1://Heal
			if(HP <= 0){terminate;}
			HealThing(HPBoost,Spawn_H);
			break;
		Case 0://Return false if max health
			if(HP >= Spawn_H){SetResultValue(0);}
			break;
	}
}

//[Trill] Floor quakes in a radius, heavily modified from CBM. Niche script probably
//
script "4SP_FloorQuakeDamage" (int maxRange, int QuakePower)
{
	int zDist;
	for(int p = 0;p < ServerMAX; p++)
	{
		if(!PlayerInGame(p))
		{
			continue;
		}
		if(xyDistance(0, p+1000) < maxRange && zDistance(0, p+1000) >= -32 && zDistance(0, p+1000) <= 32)
		{
			SpawnProjectile(0,"EnemyFloorQuake",QuakePower,0,p,0,0);
		}
	}
}

// [Russel] Check Alive script. Nicked from CBM.
//
script "4SP_CheckAlive" (void) {
    SetActivatorToTarget(0);
	if(PlayerNumber() == -1 || CheckInventory("IsDead") || !PlayerInGame(PlayerNumber())){
		SetResultValue(0);
	}
}

// [Russel] The big bad weapon script. Gives weapons based on completed bosses and selected class.
// CVARS: SV_CC_[player]_[boss]_WEP
// WEPS: [player]_[boss]WEP
//
#define MAX_BOSSES 4
str bossList[MAX_BOSSES][2] = {
    {"WoodManBossCC", "Wood"},
    {"SparkManBossCC", "Spark"},
    {"NapalmManBossCC", "Napalm"},
    {"YamatoManBossCC", "Yamato"}
};

#define MAX_PLAYERS 9
str playerList[MAX_PLAYERS][2] = {
    {"RingManSP", "Ring"},
    {"DustManSP", "Dust"},
    {"ToadManSP", "Toad"},
    {"MegaManSP", "Mega"},
    {"BrightManSP", "Bright"},
    {"SkullManSP", "Skull"},
    {"DiveManSP", "Dive"},
    {"PharaohManSP", "Pharaoh"},
    {"DrillManSP", "Drill"}
};

script "4SP_GiveWeapons" ENTER {

    str player = getPrefix(getActorClass(0), 0);

    for(int i = 0; i < MAX_BOSSES; i++) {
        str cvar = strParam(s:"SV_CC_", s:player, s:"_", s:bossList[i][1], s:"_Wep");
        str wep = strParam(s:player, s:"_", s:bossList[i][1], s:"Wep");
        if(getCvar(cvar) > 0) {
            GiveInventory(wep, 1);
        }
    }
}

script "4SP_GiveWeapons_Respawn" RESPAWN {
    ACS_NamedExecuteAlways("4SP_GiveWeapons", 0);
}

script "4SP_SetWeaponGiven" (int debug) {

    str boss;
    str cvar;
    if(debug == 0) {
        boss = getPrefix(getActorClass(0), 1);
    } else {
        boss = bossList[debug-1][1];
    }
    str player = getPrefix(getActorClass(ACS_ExecuteWithResult(257)), 0); // Player who killed the boss

    if(GetCVar("SV_CC_AllWeapons")) {
        for(int i = 0; i < MAX_PLAYERS; i++) {
            cvar = strParam(s:"SV_CC_", s:playerList[i][1], s:"_", s:boss, s:"_Wep");
            setCVar(cvar, true);
        }
    } else {
        cvar = strParam(s:"SV_CC_", s:player, s:"_", s:boss, s:"_Wep");
        setCVar(cvar, true);
    }
}

function str getPrefix(str name, bool which) {

    str res = "none";

    if(!which) { // players

        for(int i = 0; i < MAX_PLAYERS; i++) {
            if(strcmp(playerList[i][0], name)==0) {
                res = playerList[i][1];
            }
        }

    } else { // bosses

        for(int j = 0; j < MAX_BOSSES; j++) {
            if(strcmp(bossList[j][0], name)==0) {
                res = bossList[j][1];
            }
        }
    }

    return res;
}

// [Russel] Script to loop and check if the player is standing on floor or a solid.
//
script "4SP_GroundEnter" ENTER {

    int zCheck = 0;
    bool onGround = true;

    while(GetActorProperty(0, APROP_HEALTH) > 0) {

        if(GetActorZ(0) - GetActorFloorZ(0) == 0) {
            onGround = true;
        }
        
        if(GetActorVelZ(0) != 0) {
            onGround = false;
            zCheck = 0;
        }

        if(!onGround) {
            if(GetActorVelZ(0) == 0) {
                if(zCheck >= 3) {
                    zCheck++;
                } else {
                    onGround = true;
                }
            }
        }

        if(onGround) {
            if(!CheckInventory("OnGround") || CheckInventory("InAir")) {
                GiveInventory("OnGround", 1);
                TakeInventory("InAir", 1);
            }
        } else {
            if(CheckInventory("OnGround") || !CheckInventory("InAir")) {
                TakeInventory("OnGround", 1);
                GiveInventory("InAir", 1);
            }
        }

        delay(1);
    }
}

script "4SP_GroundRespawn" RESPAWN {
    ACS_NamedExecuteAlways("4SP_GroundEnter", 0);
}

// [Trill] Script for removing blocking linedefs
script "4SP_BlockRemover" (int which)
{
    if(which==0){
        terminate;
    }
    Line_SetBlocking(which,0,BLOCKF_PLAYERS);
}

// [Trill] Minimap marker script, snagged from MMSP
script "4SP_MinimapMarker" OPEN clientside
{
for(int i=0; i<64; i++)
    {
    if(ClassifyActor(1000+i) & 34){
		if(CheckActorInventory(1000+i,"BrightmanWep")==1){SpawnSpot("BrightMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"DivemanWep")==1){SpawnSpot("DiveMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"DrillmanWep")==1){SpawnSpot("DrillMarker",1000+i,0,0);}
        if(CheckActorInventory(1000+i,"DustmanWep")==1){SpawnSpot("DustMarker",1000+i,0,0);}
        if(CheckActorInventory(1000+i,"PharaohmanWep")==1){SpawnSpot("PharaohMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"RingmanWep")==1){SpawnSpot("RingMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"SkullmanWep")==1){SpawnSpot("SkullMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"ToadmanWep")==1){SpawnSpot("ToadMarker",1000+i,0,0);}
		if(CheckActorInventory(1000+i,"MegamanWep")==1){SpawnSpot("MegaMarker",1000+i,0,0);}
	}
    }
	Delay(1);
	restart;
}

// [Trill] Survival checker
script "4SP_SurvivalCheck" (void)
{
if(GetCvar("survival")==1)
{SetResultValue(1);}
Else
{SetResultValue(0);}
}

// [Trill] 1-Up 
script "4SP_GiveLife" (void) 
{
SetPlayerLivesLeft(PlayerNumber(),GetPlayerLivesLeft(PlayerNumber())+1); 
}

script "4SP_LifeDisplay" (void) CLIENTSIDE 
{
If(CheckActorClass(consolePlayerNumber()+1000,"BrightmanSP")){SetActorState(0,"Brightman");}
If(CheckActorClass(consolePlayerNumber()+1000,"DivemanSP")){SetActorState(0,"Diveman");}
If(CheckActorClass(consolePlayerNumber()+1000,"DrillmanSP")){SetActorState(0,"Drillman");}
If(CheckActorClass(consolePlayerNumber()+1000,"DustmanSP")){SetActorState(0,"Dustman");}
If(CheckActorClass(consolePlayerNumber()+1000,"PharaohmanSP")){SetActorState(0,"Pharaohman");}
If(CheckActorClass(consolePlayerNumber()+1000,"RingmanSP")){SetActorState(0,"Ringman");}
If(CheckActorClass(consolePlayerNumber()+1000,"SkullmanSP")){SetActorState(0,"Skullman");}
If(CheckActorClass(consolePlayerNumber()+1000,"ToadmanSP")){SetActorState(0,"Toadman");}
If(CheckActorClass(consolePlayerNumber()+1000,"MegamanSP")){SetActorState(0,"Megaman");}
}

// [Trill] Script for Drillman
script "4SP_GetHeight" (void)
{
SetActivatorToTarget(0);
int Result = GetActorZ(0)/65536;
SetResultValue(Result);
}