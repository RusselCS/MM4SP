#library "SPTOOLSL"

#include "zcommon.acs"

// [Trill] Scripts ported and slightly modified from MMSP-Basic
//
script "4SP_EnemyStart" (void)
{
Delay(1);
ACS_NamedExecuteAlways("4SP_EnemyPain",0);
GiveInventory("RadiusCounter",GetActorProperty(0,APROP_Radius)/65536);
GiveInventory("HeightCounter",GetActorProperty(0,APROP_Height)/65536);
if(CheckInventory("HealthScaled")==1){terminate;}

SetActorProperty(0,APROP_Health,GetActorProperty (0,APROP_Health) + (GetActorProperty (0,APROP_Health)/4) * PlayerCount());
GiveInventory("HealthScaled",1);
}

Script "4SP_EnemyPain" (void) //CLIENTSIDE
{
    if(CheckInventory("BoostFlag")>0){terminate;} // Do not run twice for one monster
    int HP = GetActorProperty(0, APROP_Health);
    GiveInventory("BoostFlag", 1);
    
	
    while(GetActorProperty(0, APROP_Health)>0){
	
        if(HP != GetActorProperty(0, APROP_Health)){
        PlayActorSound(0, SOUND_Pain, CHAN_BODY, 1.0, false, ATTN_NORM);
        SetActorProperty(0, APROP_RenderStyle, STYLE_None);
        Delay(1);
        SetActorProperty(0, APROP_RenderStyle, STYLE_Normal);
        HP = GetActorProperty(0, APROP_Health);
		}
		
    Delay(4);
    }
}

// [Russel] Simple inventory count script.
// [Trill] Added onto it to include pointer selection.
// 
script "4SP_CountInv" (int which, int pointer)
{

    if(pointer != 0) {
		setActivator(0, pointer);
	}

    switch(which) {
        case 0: // Ring Man
            SetResultValue(CheckInventory("RingManAmmo"));
            break;
        Case 1: // Enemy Radius
			SetResultValue(CheckInventory("RadiusCounter"));
			break;
		Case 2: // Enemy Height
			SetResultValue(CheckInventory("HeightCounter"));
			break;
		Case 3: // Enemy Damage
			SetResultValue(CheckInventory("DamageCounter"));
			break;    
    }

}

// [Russel] Check Alive script. Nicked from CBM.
//
script "4SP_CheckAlive" (void) {
    SetActivatorToTarget(0);
	if(PlayerNumber() == -1 || CheckInventory("IsDead") || !PlayerInGame(PlayerNumber())){
		SetResultValue(0);
	}
}

// [Russel] The big bad weapon script. Gives weapons based on completed bosses and selected class.
// CVARS: SV_CC_[player]_[boss]_WEP
// WEPS: [player]_[boss]WEP
//
#define MAX_BOSSES 4
str bossList[MAX_BOSSES][2] = {
    {"WoodManSP", "Wood"},
    {"SparkManSP", "Spark"},
    {"NapalmManSP", "Napalm"},
    {"YamatoManSP", "Yamato"}
};

#define MAX_PLAYERS 1
str playerList[MAX_PLAYERS][2] = {
    {"RingManSP", "Ring"}
};

script "4SP_GiveWeapons" ENTER {

    str player = getPrefix(getActorClass(0), 0);

    for(int i = 0; i < MAX_BOSSES; i++) {
        str cvar = strParam(s:"SV_CC_", s:player, s:"_", s:bossList[i][1], s:"_Wep");
        str wep = strParam(s:player, s:"_", s:bossList[i][1], s:"Wep");
        if(getCvar(cvar) > 0) {
            GiveInventory(wep, 1);
        }
    }
}

script "4SP_GiveWeapons_Respawn" RESPAWN {
    ACS_NamedExecuteAlways("4SP_GiveWeapons", 0);
}

script "4SP_SetWeaponGiven" (int debug) {

    str boss;
    str cvar;
    if(debug == 0) {
        boss = getPrefix(getActorClass(0), 1);
    } else {
        boss = bossList[debug-1][1];
    }
    str player = getPrefix(getActorClass(ACS_ExecuteWithResult(257)), 0); // Player who killed the boss

    if(GetCVar("SV_CC_AllWeapons")) {
        for(int i = 0; i < MAX_PLAYERS; i++) {
            cvar = strParam(s:"SV_CC_", s:playerList[i][1], s:"_", s:boss, s:"_Wep");
            setCVar(cvar, true);
        }
    } else {
        cvar = strParam(s:"SV_CC_", s:player, s:"_", s:boss, s:"_Wep");
        setCVar(cvar, true);
    }
}

function str getPrefix(str name, bool which) {

    str res = "none";

    if(!which) { // players

        for(int i = 0; i < MAX_PLAYERS; i++) {
            if(strcmp(playerList[i][0], name)==0) {
                res = playerList[i][1];
            }
        }

    } else { // bosses

        for(int j = 0; j < MAX_BOSSES; j++) {
            if(strcmp(bossList[j][0], name)==0) {
                res = bossList[j][1];
            }
        }
    }

    return res;
}
